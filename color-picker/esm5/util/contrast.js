/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Rgba } from './formats';
/**
 * @param {?} foreground
 * @param {?} background
 * @return {?}
 */
export function calculateContrast(foreground, background) {
    if (Math.round(foreground.a * 100) < 100)
        foreground = compositeColors(foreground, background);
    /** @type {?} */
    var luminance1 = calculateLuminance(foreground) + 0.05;
    /** @type {?} */
    var luminance2 = calculateLuminance(background) + 0.05;
    return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2);
}
/**
 * @param {?} foreground
 * @param {?} background
 * @return {?}
 */
export function compositeColors(foreground, background) {
    /** @type {?} */
    var a = compositeAlpha(foreground.a, background.a);
    /** @type {?} */
    var r = compositeComponent(foreground.r, foreground.a, background.r, background.a, a);
    /** @type {?} */
    var g = compositeComponent(foreground.g, foreground.a, background.g, background.a, a);
    /** @type {?} */
    var b = compositeComponent(foreground.b, foreground.a, background.b, background.a, a);
    return new Rgba(r, g, b, a);
}
/**
 * @param {?} foregroundAlpha
 * @param {?} backgroundAlpha
 * @return {?}
 */
export function compositeAlpha(foregroundAlpha, backgroundAlpha) {
    return 1 - (1 - backgroundAlpha) * (1 - foregroundAlpha);
}
/**
 * @param {?} fgC
 * @param {?} fgA
 * @param {?} bgC
 * @param {?} bgA
 * @param {?} a
 * @return {?}
 */
export function compositeComponent(fgC, fgA, bgC, bgA, a) {
    if (a == 0)
        return 0;
    return ((fgC * fgA) + (bgC * bgA * (1 - fgA))) / a;
}
/**
 * @param {?} color
 * @return {?}
 */
export function calculateLuminance(color) {
    /** @type {?} */
    var red = color.r / 255;
    red = red < 0.03928 ? red / 12.92 : Math.pow((red + 0.055) / 1.055, 2.4);
    /** @type {?} */
    var green = color.g / 255;
    green = green < 0.03928 ? green / 12.92 : Math.pow((green + 0.055) / 1.055, 2.4);
    /** @type {?} */
    var blue = color.b / 255;
    blue = blue < 0.03928 ? blue / 12.92 : Math.pow((blue + 0.055) / 1.055, 2.4);
    return (0.2126 * red) + (0.7152 * green) + (0.0722 * blue);
}
/**
 * @param {?} foreground
 * @param {?} background
 * @param {?} minContrastRatio
 * @return {?}
 */
export function calculateMinimumAlpha(foreground, background, minContrastRatio) {
    if (Math.round(background.a * 100) < 100)
        return -1;
    /** @type {?} */
    var testForeground = new Rgba(foreground.r, foreground.g, foreground.b, 1);
    /** @type {?} */
    var testRatio = calculateContrast(testForeground, background);
    if (testRatio < minContrastRatio)
        return -1;
    /** @type {?} */
    var numIterations = 0;
    /** @type {?} */
    var minAlpha = 0;
    /** @type {?} */
    var maxAlpha = 1;
    while (numIterations <= 10 && (maxAlpha - minAlpha) > 0.01) {
        /** @type {?} */
        var testAlpha = (minAlpha + maxAlpha) / 2;
        testForeground = new Rgba(foreground.r, foreground.g, foreground.b, testAlpha);
        testRatio = calculateContrast(testForeground, background);
        if (testRatio < minContrastRatio)
            minAlpha = testAlpha;
        else
            maxAlpha = testAlpha;
        numIterations++;
    }
    return maxAlpha;
}
/** @type {?} */
var white = new Rgba(218, 218, 218, 1);
/** @type {?} */
var black = new Rgba(34, 34, 34, 1);
/**
 * @param {?} background
 * @return {?}
 */
export function opaqueSliderWhite(background) {
    /** @type {?} */
    var cWhite = calculateContrast(white, new Rgba(background.r, background.g, background.b, 1));
    /** @type {?} */
    var cBlack = calculateContrast(black, new Rgba(background.r, background.g, background.b, 1));
    return cWhite > cBlack;
}
/**
 * @param {?} background
 * @return {?}
 */
export function transparentSliderWhite(background) {
    /** @type {?} */
    var bg = compositeColors(background, white);
    /** @type {?} */
    var cWhite = calculateContrast(white, new Rgba(bg.r, bg.g, bg.b, 1));
    /** @type {?} */
    var cBlack = calculateContrast(black, new Rgba(bg.r, bg.g, bg.b, 1));
    return cWhite > cBlack;
}
//# sourceMappingURL=data:application/json;base64,