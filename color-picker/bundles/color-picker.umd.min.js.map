{"version":3,"sources":["ng://color-picker/util/formats.ts","ng://color-picker/lib/color-picker.service.ts","ng://color-picker/util/contrast.ts","ng://color-picker/util/helpers.ts","ng://color-picker/util/types.ts","ng://color-picker/lib/color-picker/color-picker.component.ts","ng://color-picker/lib/color-picker.directive.ts","ng://color-picker/lib/slider.directive.ts","ng://color-picker/lib/text.directive.ts","ng://color-picker/lib/color-picker.module.ts"],"names":["HEX","RGBA","HSLA","Cmyk","c","m","y","k","this","Hsla","h","s","l","a","Hsva","v","Rgba","r","g","b","ColorPickerService","active","prototype","setActive","cpDialogDisplay","closeDialog","hsva2hsla","hsva","Math","abs","hsla2hsva","hsla","min","hsvaToRgba","i","floor","f","p","q","t","rgbaToCmyk","rgba","max","rgbaToHsva","d","rgbaToHex","allowHex8","hex","toString","substr","round","denormalizeRGBA","stringToHsva","colorString","toLowerCase","stringParsers","re","parse","execResult","parseInt","isNaN","parseFloat","key","push","hasOwnProperty","parser","match","exec","color","outputFormat","alphaChannel","hslaText","Injectable","args","providedIn","calculateContrast","foreground","background","compositeColors","luminance1","calculateLuminance","luminance2","compositeAlpha","foregroundAlpha","backgroundAlpha","compositeComponent","fgC","fgA","bgC","bgA","red","pow","green","blue","white","black","opaqueSliderWhite","cWhite","SliderPosition","auto","enabled","disabled","always","forced","top","left","right","bottom","popup","inline","fixed","relative","static","absolute","grayscale","presets","parseColorMode","mode","toUpperCase","ColorModeInternal","ColorPickerComponent","elRef","cdRef","service","AlphaChannel","colorModeInternal","dialogDisplay","DialogDisplay","isIE10","dialogArrowSize","dialogArrowOffset","dialogInputFields","ColorFormats","useRootViewContainer","position","Position","cpColorMode","cpPosition","DialogPosition","handleEsc","event","show","onCancelColor","handleEnter","onAcceptColor","ngOnInit","_this","slider","cpOutputFormat","OutputFormat","format","listenerMouseDown","onMouseDown","listenerResize","onResize","openDialog","initialColor","ngOnDestroy","ngAfterViewInit","cpWidth","updateColorPicker","detectChanges","emit","width","directiveElementRef","nativeElement","offsetWidth","height","setInitialColor","setColorFromString","openColorPicker","closeColorPicker","setupDialog","instance","elementRef","cpHeight","cpFallbackColor","cpAlphaChannel","cpDisableInput","cpIgnoredElements","cpSaveClickOutside","cpCloseClickOutside","cpUseRootViewContainer","cpPositionOffset","cpPositionRelativeToArrow","cpPresetLabel","cpPresetColors","cpMaxPresetColorsLength","cpPresetEmptyMessage","cpPresetEmptyMessageClass","cpOKButton","cpOKButtonClass","cpOKButtonText","cpCancelButton","cpCancelButtonClass","cpCancelButtonText","cpAddColorButton","cpAddColorButtonText","cpRemoveColorButtonClass","detectIE","ua","navigator","userAgent","msie","indexOf","substring","directiveInstance","fallbackColor","setPresetConfig","value","update","sliderH","setDialogPosition","onDragEnd","sliderDragEnd","outputColor","onDragStart","sliderDragStart","target","isDescendant","filter","item","length","colorChanged","stopPropagation","colorSelected","colorCanceled","onFormatToggle","change","availableFormats","nextFormat","onColorChange","rgX","rgY","sliderChanged","onHueChange","onValueChange","onAlphaChange","onHexInput","validHex","valid","test","split","map","join","inputChanged","input","onRedInput","rg","onBlueInput","onGreenInput","onHueInput","onValueInput","onAlphaInput","onLightnessInput","onSaturationInput","onAddPresetColor","concat","presetColorsChanged","onRemovePresetColor","hidden","setTimeout","stateChanged","document","addEventListener","window","removeEventListener","lastOutput","hue","rgbaText","hexText","hexAlpha","hueSliderColor","alphaSliderColor","svSliderWhite","hueSliderWhite","valueSliderWhite","alphaSliderWhite","transparentSliderWhite","bg","selectedColor","transform","style","parentNode","transformNode","node","dialogHeight","dialogElement","offsetHeight","tagName","getComputedStyle","getPropertyValue","boxDirective","createDialogBox","HTMLUnknownElement","boxParent","arrowTop","parent","child","element","offset","getBoundingClientRect","pageYOffset","pageXOffset","Component","selector","template","encapsulation","ViewEncapsulation","Emulated","ElementRef","ChangeDetectorRef","ViewChild","HostListener","ColorPickerDirective","injector","cfr","appRef","vcRef","dialogCreated","ignoreChanges","cpToggle","cpDisabled","cpInputChange","EventEmitter","cpToggleChange","cpSliderChange","cpSliderDragEnd","cpSliderDragStart","cpOpen","cpClose","cpCancel","cpSelect","cpColorChange","cpPresetColorsChange","Object","defineProperty","_cpColor","val","dialog","handleClick","inputFocus","handleFocus","handleInput","inputChange","cmpRef","undefined","destroy","ngOnChanges","changes","currentValue","colorPicker","changeDetectorRef","cpColor","classOfRootComponent","componentTypes","appInstance","get","viewContainerRef","console","warn","compFactory","resolveComponentFactory","createComponent","state","ignore","ignored","activeElement","Directive","Injector","ComponentFactoryResolver","ApplicationRef","ViewContainerRef","Input","Output","SliderDirective","dragEnd","dragStart","newValue","listenerMove","move","listenerStop","stop","mouseDown","start","touchStart","preventDefault","setCursor","getX","pageX","touches","getY","pageY","x","TextDirective","numeric","ColorPickerModule","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["export enum ColorFormats {\r\n    HEX,\r\n    RGBA,\r\n    HSLA\r\n}\r\n\r\nexport class Cmyk {\r\n    constructor(public c: number, public m: number, public y: number, public k: number) { }\r\n}\r\n\r\nexport class Hsla {\r\n    constructor(public h: number, public s: number, public l: number, public a: number) { }\r\n}\r\n\r\nexport class Hsva {\r\n    constructor(public h: number, public s: number, public v: number, public a: number) { }\r\n}\r\n\r\nexport class Rgba {\r\n    constructor(public r: number, public g: number, public b: number, public a: number) { }\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { Cmyk, Hsla, Hsva, Rgba } from '../util/formats'\r\nimport { ColorPickerComponent } from './color-picker/color-picker.component'\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ColorPickerService {\r\n    private active: ColorPickerComponent | null = null\r\n\r\n    constructor() { }\r\n\r\n    public setActive(active: ColorPickerComponent | null): void {\r\n        if (this.active && this.active !== active && this.active.cpDialogDisplay !== 'inline') {\r\n            this.active.closeDialog()\r\n        }\r\n\r\n        this.active = active\r\n    }\r\n\r\n    public hsva2hsla(hsva: Hsva): Hsla {\r\n        const h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a\r\n\r\n        if (v === 0) {\r\n            return new Hsla(h, 0, 0, a)\r\n        } else if (s === 0 && v === 1) {\r\n            return new Hsla(h, 1, 1, a)\r\n        } else {\r\n            const l = v * (2 - s) / 2\r\n\r\n            return new Hsla(h, v * s / (1 - Math.abs(2 * l - 1)), l, a)\r\n        }\r\n    }\r\n\r\n    public hsla2hsva(hsla: Hsla): Hsva {\r\n        const h = Math.min(hsla.h, 1), s = Math.min(hsla.s, 1)\r\n        const l = Math.min(hsla.l, 1), a = Math.min(hsla.a, 1)\r\n\r\n        if (l === 0) {\r\n            return new Hsva(h, 0, 0, a)\r\n        } else {\r\n            const v = l + s * (1 - Math.abs(2 * l - 1)) / 2\r\n\r\n            return new Hsva(h, 2 * (v - l) / v, v, a)\r\n        }\r\n    }\r\n\r\n    public hsvaToRgba(hsva: Hsva): Rgba {\r\n        let r: number, g: number, b: number\r\n\r\n        const h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a\r\n\r\n        const i = Math.floor(h * 6)\r\n        const f = h * 6 - i\r\n        const p = v * (1 - s)\r\n        const q = v * (1 - f * s)\r\n        const t = v * (1 - (1 - f) * s)\r\n\r\n        switch (i % 6) {\r\n            case 0:\r\n                r = v, g = t, b = p\r\n                break\r\n            case 1:\r\n                r = q, g = v, b = p\r\n                break\r\n            case 2:\r\n                r = p, g = v, b = t\r\n                break\r\n            case 3:\r\n                r = p, g = q, b = v\r\n                break\r\n            case 4:\r\n                r = t, g = p, b = v\r\n                break\r\n            case 5:\r\n                r = v, g = p, b = q\r\n                break\r\n            default:\r\n                r = 0, g = 0, b = 0\r\n        }\r\n\r\n        return new Rgba(r, g, b, a)\r\n    }\r\n\r\n    public rgbaToCmyk(rgba: Rgba): Cmyk {\r\n        const k: number = 1 - Math.max(rgba.r, rgba.g, rgba.b)\r\n\r\n        if (k === 1) {\r\n            return new Cmyk(0, 0, 0, 1)\r\n        } else {\r\n            const c = (1 - rgba.r - k) / (1 - k)\r\n            const m = (1 - rgba.g - k) / (1 - k)\r\n            const y = (1 - rgba.b - k) / (1 - k)\r\n\r\n            return new Cmyk(c, m, y, k)\r\n        }\r\n    }\r\n\r\n    public rgbaToHsva(rgba: Rgba): Hsva {\r\n        let h: number, s: number\r\n\r\n        const r = Math.min(rgba.r, 1), g = Math.min(rgba.g, 1)\r\n        const b = Math.min(rgba.b, 1), a = Math.min(rgba.a, 1)\r\n\r\n        const max = Math.max(r, g, b), min = Math.min(r, g, b)\r\n\r\n        const v: number = max, d = max - min\r\n\r\n        s = (max === 0) ? 0 : d / max\r\n\r\n        if (max === min) {\r\n            h = 0\r\n        } else {\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / d + (g < b ? 6 : 0)\r\n                    break\r\n                case g:\r\n                    h = (b - r) / d + 2\r\n                    break\r\n                case b:\r\n                    h = (r - g) / d + 4\r\n                    break\r\n                default:\r\n                    h = 0\r\n            }\r\n\r\n            h /= 6\r\n        }\r\n\r\n        return new Hsva(h, s, v, a)\r\n    }\r\n\r\n    public rgbaToHex(rgba: Rgba, allowHex8?: boolean): string {\r\n        /* tslint:disable:no-bitwise */\r\n        let hex = '#' + ((1 << 24) | (rgba.r << 16) | (rgba.g << 8) | rgba.b).toString(16).substr(1)\r\n\r\n        if (allowHex8) {\r\n            hex += ((1 << 8) | Math.round(rgba.a * 255)).toString(16).substr(1)\r\n        }\r\n        /* tslint:enable:no-bitwise */\r\n\r\n        return hex\r\n    }\r\n\r\n    public denormalizeRGBA(rgba: Rgba): Rgba {\r\n        return new Rgba(Math.round(rgba.r * 255), Math.round(rgba.g * 255), Math.round(rgba.b * 255), rgba.a)\r\n    }\r\n\r\n    public stringToHsva(colorString: string = '', allowHex8: boolean = false): Hsva | null {\r\n        let hsva: Hsva | null = null\r\n\r\n        colorString = (colorString || '').toLowerCase()\r\n\r\n        const stringParsers = [\r\n            {\r\n                re: /(rgb)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\r\n                parse: function (execResult: any) {\r\n                    return new Rgba(parseInt(execResult[2], 10) / 255,\r\n                        parseInt(execResult[3], 10) / 255,\r\n                        parseInt(execResult[4], 10) / 255,\r\n                        isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]))\r\n                }\r\n            }, {\r\n                re: /(hsl)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\r\n                parse: function (execResult: any) {\r\n                    return new Hsla(parseInt(execResult[2], 10) / 360,\r\n                        parseInt(execResult[3], 10) / 100,\r\n                        parseInt(execResult[4], 10) / 100,\r\n                        isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]))\r\n                }\r\n            }\r\n        ]\r\n\r\n        if (allowHex8) {\r\n            stringParsers.push({\r\n                re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})?$/,\r\n                parse: function (execResult: any) {\r\n                    return new Rgba(parseInt(execResult[1], 16) / 255,\r\n                        parseInt(execResult[2], 16) / 255,\r\n                        parseInt(execResult[3], 16) / 255,\r\n                        parseInt(execResult[4] || 'FF', 16) / 255)\r\n                }\r\n            })\r\n        } else {\r\n            stringParsers.push({\r\n                re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,\r\n                parse: function (execResult: any) {\r\n                    return new Rgba(parseInt(execResult[1], 16) / 255,\r\n                        parseInt(execResult[2], 16) / 255,\r\n                        parseInt(execResult[3], 16) / 255,\r\n                        1)\r\n                }\r\n            })\r\n        }\r\n\r\n        stringParsers.push({\r\n            re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/,\r\n            parse: function (execResult: any) {\r\n                return new Rgba(parseInt(execResult[1] + execResult[1], 16) / 255,\r\n                    parseInt(execResult[2] + execResult[2], 16) / 255,\r\n                    parseInt(execResult[3] + execResult[3], 16) / 255,\r\n                    1)\r\n            }\r\n        })\r\n\r\n        for (const key in stringParsers) {\r\n            if (stringParsers.hasOwnProperty(key)) {\r\n                const parser = stringParsers[key]\r\n\r\n                const match = parser.re.exec(colorString), color: any = match && parser.parse(match)\r\n\r\n                if (color) {\r\n                    if (color instanceof Rgba) {\r\n                        hsva = this.rgbaToHsva(color)\r\n                    } else if (color instanceof Hsla) {\r\n                        hsva = this.hsla2hsva(color)\r\n                    }\r\n\r\n                    return hsva\r\n                }\r\n            }\r\n        }\r\n\r\n        return hsva\r\n    }\r\n\r\n    public outputFormat(hsva: Hsva, outputFormat: string, alphaChannel: string | null): string {\r\n        if (outputFormat === 'auto') {\r\n            outputFormat = hsva.a < 1 ? 'rgba' : 'hex'\r\n        }\r\n\r\n        switch (outputFormat) {\r\n            case 'hsla':\r\n                const hsla = this.hsva2hsla(hsva)\r\n\r\n                const hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100),\r\n                    Math.round(hsla.l * 100), Math.round(hsla.a * 100) / 100)\r\n\r\n                if (hsva.a < 1 || alphaChannel === 'always') {\r\n                    return 'hsla(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%,' +\r\n                        hslaText.a + ')'\r\n                } else {\r\n                    return 'hsl(' + hslaText.h + ',' + hslaText.s + '%,' + hslaText.l + '%)'\r\n                }\r\n\r\n            case 'rgba':\r\n                const rgba = this.denormalizeRGBA(this.hsvaToRgba(hsva))\r\n\r\n                if (hsva.a < 1 || alphaChannel === 'always') {\r\n                    return 'rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' +\r\n                        Math.round(rgba.a * 100) / 100 + ')'\r\n                } else {\r\n                    return 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')'\r\n                }\r\n\r\n            default:\r\n                const allowHex8 = (alphaChannel === 'always' || alphaChannel === 'forced')\r\n\r\n                return this.rgbaToHex(this.denormalizeRGBA(this.hsvaToRgba(hsva)), allowHex8)\r\n        }\r\n    }\r\n}\r\n","import { Rgba } from './formats'\r\n\r\nexport function calculateContrast(foreground: Rgba, background: Rgba) {\r\n\r\n    if (Math.round(foreground.a * 100) < 100)\r\n        foreground = compositeColors(foreground, background)\r\n\r\n    const luminance1 = calculateLuminance(foreground) + 0.05\r\n    const luminance2 = calculateLuminance(background) + 0.05\r\n\r\n    return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2)\r\n}\r\n\r\nexport function compositeColors(foreground: Rgba, background: Rgba) {\r\n    const a = compositeAlpha(foreground.a, background.a)\r\n\r\n    const r = compositeComponent(foreground.r, foreground.a, background.r, background.a, a)\r\n    const g = compositeComponent(foreground.g, foreground.a, background.g, background.a, a)\r\n    const b = compositeComponent(foreground.b, foreground.a, background.b, background.a, a)\r\n\r\n    return new Rgba(r, g, b, a)\r\n}\r\n\r\nexport function compositeAlpha(foregroundAlpha: number, backgroundAlpha: number) {\r\n    return 1 - (1 - backgroundAlpha) * (1 - foregroundAlpha)\r\n}\r\n\r\nexport function compositeComponent(fgC: number, fgA: number, bgC: number, bgA: number, a: number) {\r\n    if (a == 0) return 0\r\n    return ((fgC * fgA) + (bgC * bgA * (1 - fgA))) / a\r\n}\r\n\r\nexport function calculateLuminance(color: Rgba) {\r\n    let red = color.r / 255\r\n    red = red < 0.03928 ? red / 12.92 : Math.pow((red + 0.055) / 1.055, 2.4)\r\n\r\n    let green = color.g / 255\r\n    green = green < 0.03928 ? green / 12.92 : Math.pow((green + 0.055) / 1.055, 2.4)\r\n\r\n    let blue = color.b / 255\r\n    blue = blue < 0.03928 ? blue / 12.92 : Math.pow((blue + 0.055) / 1.055, 2.4)\r\n\r\n    return (0.2126 * red) + (0.7152 * green) + (0.0722 * blue)\r\n}\r\n\r\nexport function calculateMinimumAlpha(foreground: Rgba, background: Rgba, minContrastRatio: number) {\r\n    if (Math.round(background.a * 100) < 100)\r\n        return -1\r\n\r\n    let testForeground = new Rgba(foreground.r, foreground.g, foreground.b, 1)\r\n    let testRatio = calculateContrast(testForeground, background)\r\n    if (testRatio < minContrastRatio)\r\n        return -1\r\n\r\n    let numIterations = 0\r\n    let minAlpha = 0\r\n    let maxAlpha = 1\r\n\r\n    while (numIterations <= 10 && (maxAlpha - minAlpha) > 0.01) {\r\n        const testAlpha = (minAlpha + maxAlpha) / 2\r\n\r\n        testForeground = new Rgba(foreground.r, foreground.g, foreground.b, testAlpha)\r\n        testRatio = calculateContrast(testForeground, background)\r\n\r\n        if (testRatio < minContrastRatio)\r\n            minAlpha = testAlpha\r\n        else\r\n            maxAlpha = testAlpha\r\n\r\n        numIterations++\r\n    }\r\n\r\n    return maxAlpha\r\n}\r\n\r\nconst white = new Rgba(218, 218, 218, 1)\r\nconst black = new Rgba(34, 34, 34, 1)\r\n\r\nexport function opaqueSliderWhite(background: Rgba) {\r\n    const cWhite = calculateContrast(white, new Rgba(background.r, background.g, background.b, 1))\r\n    const cBlack = calculateContrast(black, new Rgba(background.r, background.g, background.b, 1))\r\n\r\n    return cWhite > cBlack\r\n}\r\n\r\nexport function transparentSliderWhite(background: Rgba) {\r\n    const bg = compositeColors(background, white)\r\n    const cWhite = calculateContrast(white, new Rgba(bg.r, bg.g, bg.b, 1))\r\n    const cBlack = calculateContrast(black, new Rgba(bg.r, bg.g, bg.b, 1))\r\n\r\n    return cWhite > cBlack\r\n}\r\n","export function detectIE(): boolean | number {\r\n    let ua = ''\r\n\r\n    if (typeof navigator !== 'undefined') {\r\n        ua = navigator.userAgent.toLowerCase()\r\n    }\r\n\r\n    const msie = ua.indexOf('msie ')\r\n\r\n    if (msie > 0) {\r\n        // IE 10 or older => return version number\r\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10)\r\n    }\r\n\r\n    // Other browser\r\n    return false\r\n}\r\n\r\nexport class SliderPosition {\r\n    constructor(public h: number, public s: number, public v: number, public a: number) { }\r\n}\r\n\r\nexport class SliderDimension {\r\n    constructor(public h: number, public s: number, public v: number, public a: number) { }\r\n}\r\n","export enum OutputFormat {\r\n    auto = 'auto',\r\n    hex = 'hex',\r\n    rgba = 'rgba',\r\n    hsla = 'hsla'\r\n}\r\n\r\nexport enum AlphaChannel {\r\n    enabled = 'enabled',\r\n    disabled = 'disabled',\r\n    always = 'always',\r\n    forced = 'forced'\r\n}\r\n\r\nexport enum DialogPosition {\r\n    top = 'top',\r\n    left = 'left',\r\n    right = 'right',\r\n    bottom = 'bottom'\r\n}\r\n\r\nexport enum DialogDisplay {\r\n    popup = 'popup',\r\n    inline = 'inline'\r\n}\r\n\r\nexport enum Position {\r\n    fixed = 'fixed',\r\n    relative = 'relative',\r\n    static = 'static',\r\n    absolute = 'absolute'\r\n}\r\n\r\nexport type ColorMode = 'color' | 'c' | '1' | 'grayscale' | 'g' | '2' | 'presets' | 'p' | '3'\r\n\r\nexport enum ColorModeInternal {\r\n    color,\r\n    grayscale,\r\n    presets\r\n}\r\n\r\nexport function parseColorMode(mode: string): ColorModeInternal {\r\n    switch (mode.toString().toUpperCase()) {\r\n        case '1':\r\n        case 'C':\r\n        case 'COLOR':\r\n            return ColorModeInternal.color\r\n\r\n        case '2':\r\n        case 'G':\r\n        case 'GRAYSCALE':\r\n            return ColorModeInternal.grayscale\r\n\r\n        case '3':\r\n        case 'P':\r\n        case 'PRESETS':\r\n            return ColorModeInternal.presets\r\n\r\n        default:\r\n            return ColorModeInternal.color\r\n    }\r\n}\r\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core'\r\nimport { opaqueSliderWhite, transparentSliderWhite } from '../../util/contrast'\r\nimport { ColorFormats, Hsla, Hsva, Rgba } from '../../util/formats'\r\nimport { detectIE, SliderPosition } from '../../util/helpers'\r\nimport { AlphaChannel, ColorMode, ColorModeInternal, DialogDisplay, DialogPosition, OutputFormat, parseColorMode, Position } from '../../util/types'\r\nimport { ColorPickerService } from '../color-picker.service'\r\n\r\n@Component({\r\n    selector: 'cp-color-picker',\r\n    templateUrl: './color-picker.component.html',\r\n    styleUrls: ['./color-picker.component.scss'],\r\n    encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class ColorPickerComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n    readonly alphaChannel = AlphaChannel\r\n    readonly colorModeInternal = ColorModeInternal\r\n    readonly dialogDisplay = DialogDisplay\r\n\r\n    private isIE10: boolean = false\r\n\r\n    private hsva: Hsva\r\n\r\n    private width: number\r\n    private height: number\r\n\r\n    private outputColor: string\r\n    private initialColor: string\r\n    private fallbackColor: string\r\n\r\n    private listenerResize: any\r\n    private listenerMouseDown: any\r\n\r\n    private directiveInstance: any\r\n\r\n    private sliderH: number\r\n    private directiveElementRef: ElementRef\r\n\r\n    private dialogArrowSize: number = 10\r\n    private dialogArrowOffset: number = 15\r\n\r\n    private dialogInputFields: ColorFormats[] = [\r\n        ColorFormats.HEX,\r\n        ColorFormats.RGBA,\r\n        ColorFormats.HSLA\r\n    ]\r\n\r\n    private useRootViewContainer: boolean = false\r\n\r\n    public show: boolean\r\n    public hidden: boolean\r\n\r\n    public top: number\r\n    public left: number\r\n    public position: Position = Position.relative\r\n\r\n    public format: ColorFormats\r\n    public slider: SliderPosition\r\n\r\n    public hexText: string\r\n    public hexAlpha: number\r\n\r\n    public hslaText: Hsla\r\n    public rgbaText: Rgba\r\n\r\n    public arrowTop: number\r\n\r\n    public selectedColor: string\r\n    public hueSliderColor: string\r\n    public alphaSliderColor: string\r\n\r\n    public svSliderWhite: boolean\r\n    public hueSliderWhite: boolean\r\n    public valueSliderWhite: boolean\r\n    public alphaSliderWhite: boolean\r\n\r\n    public cpWidth: number\r\n    public cpHeight: number\r\n\r\n    public cpColorMode: ColorModeInternal = ColorModeInternal.color\r\n\r\n    public cpAlphaChannel: AlphaChannel\r\n    public cpOutputFormat: OutputFormat\r\n\r\n    public cpDisableInput: boolean\r\n    public cpDialogDisplay: DialogDisplay\r\n\r\n    public cpIgnoredElements: any\r\n\r\n    public cpSaveClickOutside: boolean\r\n    public cpCloseClickOutside: boolean\r\n\r\n    public cpPosition: DialogPosition = DialogPosition.right\r\n    public cpPositionOffset: number\r\n\r\n    public cpOKButton: boolean\r\n    public cpOKButtonText: string\r\n    public cpOKButtonClass: string\r\n\r\n    public cpCancelButton: boolean\r\n    public cpCancelButtonText: string\r\n    public cpCancelButtonClass: string\r\n\r\n    public cpPresetLabel: string\r\n    public cpPresetColors: string[]\r\n    public cpMaxPresetColorsLength: number\r\n\r\n    public cpPresetEmptyMessage: string\r\n    public cpPresetEmptyMessageClass: string\r\n\r\n    public cpAddColorButton: boolean\r\n    public cpAddColorButtonText: string\r\n    public cpRemoveColorButtonClass: string\r\n\r\n    @ViewChild('dialogPopup') private dialogElement: ElementRef\r\n\r\n    @HostListener('document:keyup.esc', ['$event']) handleEsc(event: any): void {\r\n        if (this.show && this.cpDialogDisplay == DialogDisplay.popup) {\r\n            this.onCancelColor(event)\r\n        }\r\n    }\r\n\r\n    @HostListener('document:keyup.enter', ['$event']) handleEnter(event: any): void {\r\n        if (this.show && this.cpDialogDisplay == DialogDisplay.popup) {\r\n            this.onAcceptColor(event)\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private elRef: ElementRef,\r\n        private cdRef: ChangeDetectorRef,\r\n        private service: ColorPickerService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.slider = new SliderPosition(0, 0, 0, 0)\r\n\r\n        if (this.cpOutputFormat == OutputFormat.rgba) {\r\n            this.format = ColorFormats.RGBA\r\n        } else if (this.cpOutputFormat == OutputFormat.hsla) {\r\n            this.format = ColorFormats.HSLA\r\n        } else {\r\n            this.format = ColorFormats.HEX\r\n        }\r\n\r\n        this.listenerMouseDown = (event: any) => { this.onMouseDown(event) }\r\n        this.listenerResize = () => { this.onResize() }\r\n\r\n        this.openDialog(this.initialColor, false)\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.closeDialog()\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.cpWidth !== 230 || this.cpDialogDisplay == DialogDisplay.inline) {\r\n\r\n            this.updateColorPicker(false)\r\n\r\n            this.cdRef.detectChanges()\r\n        }\r\n    }\r\n\r\n    public openDialog(color: any, emit: boolean = true): void {\r\n        this.service.setActive(this)\r\n\r\n        if (!this.width) {\r\n            this.cpWidth = this.directiveElementRef.nativeElement.offsetWidth\r\n        }\r\n\r\n        if (!this.height) {\r\n            this.height = 320\r\n        }\r\n\r\n        this.setInitialColor(color)\r\n\r\n        this.setColorFromString(color, emit)\r\n\r\n        this.openColorPicker()\r\n    }\r\n\r\n    public closeDialog(): void {\r\n        this.closeColorPicker()\r\n    }\r\n\r\n    public setupDialog(instance: any, elementRef: ElementRef, color: any,\r\n        cpWidth: string, cpHeight: string, cpDialogDisplay: DialogDisplay, cpFallbackColor: string,\r\n        cpColorMode: ColorMode, cpAlphaChannel: AlphaChannel, cpOutputFormat: OutputFormat,\r\n        cpDisableInput: boolean, cpIgnoredElements: any, cpSaveClickOutside: boolean,\r\n        cpCloseClickOutside: boolean, cpUseRootViewContainer: boolean, cpPosition: DialogPosition,\r\n        cpPositionOffset: string, cpPositionRelativeToArrow: boolean, cpPresetLabel: string,\r\n        cpPresetColors: string[], cpMaxPresetColorsLength: number, cpPresetEmptyMessage: string,\r\n        cpPresetEmptyMessageClass: string, cpOKButton: boolean, cpOKButtonClass: string,\r\n        cpOKButtonText: string, cpCancelButton: boolean, cpCancelButtonClass: string,\r\n        cpCancelButtonText: string, cpAddColorButton: boolean,\r\n        cpAddColorButtonText: string, cpRemoveColorButtonClass: string): void {\r\n        this.setInitialColor(color)\r\n\r\n        this.cpColorMode = parseColorMode(cpColorMode)\r\n\r\n        this.isIE10 = (detectIE() === 10)\r\n\r\n        this.directiveInstance = instance\r\n        this.directiveElementRef = elementRef\r\n\r\n        this.cpDisableInput = cpDisableInput\r\n\r\n        this.cpAlphaChannel = cpAlphaChannel\r\n        this.cpOutputFormat = cpOutputFormat\r\n        this.cpDialogDisplay = cpDialogDisplay\r\n\r\n        this.cpIgnoredElements = cpIgnoredElements\r\n\r\n        this.cpSaveClickOutside = cpSaveClickOutside\r\n        this.cpCloseClickOutside = cpCloseClickOutside\r\n\r\n        this.useRootViewContainer = cpUseRootViewContainer\r\n\r\n        this.width = this.cpWidth = parseInt(cpWidth, 10)\r\n        this.height = this.cpHeight = parseInt(cpHeight, 10)\r\n\r\n        this.cpPosition = cpPosition\r\n        this.cpPositionOffset = parseInt(cpPositionOffset, 10)\r\n\r\n        this.cpOKButton = cpOKButton\r\n        this.cpOKButtonText = cpOKButtonText\r\n        this.cpOKButtonClass = cpOKButtonClass\r\n\r\n        this.cpCancelButton = cpCancelButton\r\n        this.cpCancelButtonText = cpCancelButtonText\r\n        this.cpCancelButtonClass = cpCancelButtonClass\r\n\r\n        this.fallbackColor = cpFallbackColor || '#fff'\r\n\r\n        this.setPresetConfig(cpPresetLabel, cpPresetColors)\r\n\r\n        this.cpMaxPresetColorsLength = cpMaxPresetColorsLength\r\n        this.cpPresetEmptyMessage = cpPresetEmptyMessage\r\n        this.cpPresetEmptyMessageClass = cpPresetEmptyMessageClass\r\n\r\n        this.cpAddColorButton = cpAddColorButton\r\n        this.cpAddColorButtonText = cpAddColorButtonText\r\n        this.cpRemoveColorButtonClass = cpRemoveColorButtonClass\r\n\r\n        if (!cpPositionRelativeToArrow) {\r\n            this.dialogArrowOffset = 0\r\n        }\r\n\r\n        if (cpDialogDisplay == DialogDisplay.inline) {\r\n            this.dialogArrowSize = 0\r\n            this.dialogArrowOffset = 0\r\n        }\r\n\r\n        if (cpOutputFormat == OutputFormat.hex &&\r\n            cpAlphaChannel != AlphaChannel.always && cpAlphaChannel != AlphaChannel.forced) {\r\n            this.cpAlphaChannel = AlphaChannel.disabled\r\n        }\r\n    }\r\n\r\n    public setInitialColor(color: any): void {\r\n        this.initialColor = color\r\n    }\r\n\r\n    public setPresetConfig(cpPresetLabel: string, cpPresetColors: string[]): void {\r\n        this.cpPresetLabel = cpPresetLabel\r\n        this.cpPresetColors = cpPresetColors\r\n    }\r\n\r\n    public setColorFromString(value: string, emit: boolean = true, update: boolean = true): void {\r\n        let hsva: Hsva | null\r\n\r\n        if (this.cpAlphaChannel == AlphaChannel.always || this.cpAlphaChannel == AlphaChannel.forced) {\r\n            hsva = this.service.stringToHsva(value, true)\r\n\r\n            if (!hsva && !this.hsva) {\r\n                hsva = this.service.stringToHsva(value, false)\r\n            }\r\n        } else {\r\n            hsva = this.service.stringToHsva(value, false)\r\n        }\r\n\r\n        if (!hsva && !this.hsva) {\r\n            hsva = this.service.stringToHsva(this.fallbackColor, false)\r\n        }\r\n\r\n        if (hsva) {\r\n            this.hsva = hsva\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker(emit, update)\r\n        }\r\n    }\r\n\r\n    public onResize(): void {\r\n        if (this.position == Position.fixed) {\r\n            this.setDialogPosition()\r\n        } else if (this.cpDialogDisplay != DialogDisplay.inline) {\r\n            this.closeColorPicker()\r\n        }\r\n    }\r\n\r\n    public onDragEnd(slider: string): void {\r\n        this.directiveInstance.sliderDragEnd({ slider: slider, color: this.outputColor })\r\n    }\r\n\r\n    public onDragStart(slider: string): void {\r\n        this.directiveInstance.sliderDragStart({ slider: slider, color: this.outputColor })\r\n    }\r\n\r\n    public onMouseDown(event: MouseEvent): void {\r\n        if (!this.isIE10 && this.cpDialogDisplay == DialogDisplay.popup &&\r\n            event.target !== this.directiveElementRef.nativeElement &&\r\n            !this.isDescendant(this.elRef.nativeElement, event.target) &&\r\n            !this.isDescendant(this.directiveElementRef.nativeElement, event.target) &&\r\n            this.cpIgnoredElements.filter((item: any) => item === event.target).length === 0) {\r\n            if (!this.cpSaveClickOutside) {\r\n                this.setColorFromString(this.initialColor, false)\r\n\r\n                this.directiveInstance.colorChanged(this.initialColor)\r\n            }\r\n\r\n            if (this.cpCloseClickOutside) {\r\n                this.closeColorPicker()\r\n            }\r\n        }\r\n    }\r\n\r\n    public onAcceptColor(event: Event): void {\r\n        event.stopPropagation()\r\n\r\n        if (this.cpDialogDisplay == DialogDisplay.popup) {\r\n            this.closeColorPicker()\r\n        }\r\n\r\n        if (this.outputColor) {\r\n            this.directiveInstance.colorSelected(this.outputColor)\r\n        }\r\n    }\r\n\r\n    public onCancelColor(event: Event): void {\r\n        event.stopPropagation()\r\n\r\n        this.setColorFromString(this.initialColor, true)\r\n\r\n        if (this.cpDialogDisplay == DialogDisplay.popup) {\r\n            this.directiveInstance.colorChanged(this.initialColor, true)\r\n\r\n            this.closeColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.colorCanceled()\r\n    }\r\n\r\n    public onFormatToggle(change: number): void {\r\n        const availableFormats = this.dialogInputFields.length\r\n\r\n        const nextFormat = (((this.dialogInputFields.indexOf(this.format) + change) %\r\n            availableFormats) + availableFormats) % availableFormats\r\n\r\n        this.format = this.dialogInputFields[nextFormat]\r\n    }\r\n\r\n    public onColorChange(value: { s: number, v: number, rgX: number, rgY: number }): void {\r\n        this.hsva.s = value.s / value.rgX\r\n        this.hsva.v = value.v / value.rgY\r\n\r\n        this.updateColorPicker()\r\n\r\n        this.directiveInstance.sliderChanged({\r\n            slider: 'lightness',\r\n            value: this.hsva.v,\r\n            color: this.outputColor\r\n        })\r\n\r\n        this.directiveInstance.sliderChanged({\r\n            slider: 'saturation',\r\n            value: this.hsva.s,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onHueChange(value: { v: number, rgX: number }): void {\r\n        this.hsva.h = value.v / value.rgX\r\n        this.sliderH = this.hsva.h\r\n\r\n        this.updateColorPicker()\r\n\r\n        this.directiveInstance.sliderChanged({\r\n            slider: 'hue',\r\n            value: this.hsva.h,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onValueChange(value: { v: number, rgX: number }): void {\r\n        this.hsva.v = value.v / value.rgX\r\n\r\n        this.updateColorPicker()\r\n\r\n        this.directiveInstance.sliderChanged({\r\n            slider: 'value',\r\n            value: this.hsva.v,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onAlphaChange(value: { v: number, rgX: number }): void {\r\n        this.hsva.a = value.v / value.rgX\r\n\r\n        this.updateColorPicker()\r\n\r\n        this.directiveInstance.sliderChanged({\r\n            slider: 'alpha',\r\n            value: this.hsva.a,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onHexInput(value: string | null): void {\r\n        if (value === null) {\r\n            this.updateColorPicker()\r\n        } else {\r\n            if (value && value[0] !== '#') {\r\n                value = '#' + value\r\n            }\r\n\r\n            let validHex = /^#([a-f0-9]{3}|[a-f0-9]{6})$/gi\r\n\r\n            if (this.cpAlphaChannel == AlphaChannel.always) {\r\n                validHex = /^#([a-f0-9]{3}|[a-f0-9]{6}|[a-f0-9]{8})$/gi\r\n            }\r\n\r\n            const valid = validHex.test(value)\r\n\r\n            if (valid) {\r\n                if (value.length < 5) {\r\n                    value = '#' + value.substring(1)\r\n                        .split('')\r\n                        .map(c => c + c)\r\n                        .join('')\r\n                }\r\n\r\n                if (this.cpAlphaChannel == AlphaChannel.forced) {\r\n                    value += Math.round(this.hsva.a * 255).toString(16)\r\n                }\r\n\r\n                this.setColorFromString(value, true, false)\r\n            }\r\n\r\n            this.directiveInstance.inputChanged({\r\n                input: 'hex',\r\n                valid: valid,\r\n                value: value,\r\n                color: this.outputColor\r\n            })\r\n        }\r\n    }\r\n\r\n    public onRedInput(value: { v: number, rg: number }): void {\r\n        const rgba = this.service.hsvaToRgba(this.hsva)\r\n\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            rgba.r = value.v / value.rg\r\n\r\n            this.hsva = this.service.rgbaToHsva(rgba)\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'red',\r\n            valid: valid,\r\n            value: rgba.r,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onBlueInput(value: { v: number, rg: number }): void {\r\n        const rgba = this.service.hsvaToRgba(this.hsva)\r\n\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            rgba.b = value.v / value.rg\r\n\r\n            this.hsva = this.service.rgbaToHsva(rgba)\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'blue',\r\n            valid: valid,\r\n            value: rgba.b,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onGreenInput(value: { v: number, rg: number }): void {\r\n        const rgba = this.service.hsvaToRgba(this.hsva)\r\n\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            rgba.g = value.v / value.rg\r\n\r\n            this.hsva = this.service.rgbaToHsva(rgba)\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'green',\r\n            valid: valid,\r\n            value: rgba.g,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onHueInput(value: { v: number, rg: number }) {\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            this.hsva.h = value.v / value.rg\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'hue',\r\n            valid: valid,\r\n            value: this.hsva.h,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onValueInput(value: { v: number, rg: number }): void {\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            this.hsva.v = value.v / value.rg\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'value',\r\n            valid: valid,\r\n            value: this.hsva.v,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onAlphaInput(value: { v: number, rg: number }): void {\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            this.hsva.a = value.v / value.rg\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'alpha',\r\n            valid: valid,\r\n            value: this.hsva.a,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onLightnessInput(value: { v: number, rg: number }): void {\r\n        const hsla = this.service.hsva2hsla(this.hsva)\r\n\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            hsla.l = value.v / value.rg\r\n\r\n            this.hsva = this.service.hsla2hsva(hsla)\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'lightness',\r\n            valid: valid,\r\n            value: hsla.l,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onSaturationInput(value: { v: number, rg: number }): void {\r\n        const hsla = this.service.hsva2hsla(this.hsva)\r\n\r\n        const valid = !isNaN(value.v) && value.v >= 0 && value.v <= value.rg\r\n\r\n        if (valid) {\r\n            hsla.s = value.v / value.rg\r\n\r\n            this.hsva = this.service.hsla2hsva(hsla)\r\n\r\n            this.sliderH = this.hsva.h\r\n\r\n            this.updateColorPicker()\r\n        }\r\n\r\n        this.directiveInstance.inputChanged({\r\n            input: 'saturation',\r\n            valid: valid,\r\n            value: hsla.s,\r\n            color: this.outputColor\r\n        })\r\n    }\r\n\r\n    public onAddPresetColor(event: any, value: string): void {\r\n        event.stopPropagation()\r\n\r\n        if (!this.cpPresetColors.filter((color) => (color === value)).length) {\r\n            this.cpPresetColors = this.cpPresetColors.concat(value)\r\n\r\n            this.directiveInstance.presetColorsChanged(this.cpPresetColors)\r\n        }\r\n    }\r\n\r\n    public onRemovePresetColor(event: any, value: string): void {\r\n        event.stopPropagation()\r\n\r\n        this.cpPresetColors = this.cpPresetColors.filter((color) => (color !== value))\r\n\r\n        this.directiveInstance.presetColorsChanged(this.cpPresetColors)\r\n    }\r\n\r\n    // Private helper functions for the color picker dialog status\r\n\r\n    private openColorPicker(): void {\r\n        if (!this.show) {\r\n            this.show = true\r\n            this.hidden = true\r\n\r\n            setTimeout(() => {\r\n                this.hidden = false\r\n\r\n                this.setDialogPosition()\r\n\r\n                this.cdRef.detectChanges()\r\n            }, 0)\r\n\r\n            this.directiveInstance.stateChanged(true)\r\n\r\n            if (!this.isIE10) {\r\n                document.addEventListener('mousedown', this.listenerMouseDown)\r\n            }\r\n\r\n            window.addEventListener('resize', this.listenerResize)\r\n        }\r\n    }\r\n\r\n    private closeColorPicker(): void {\r\n        if (this.show) {\r\n            this.show = false\r\n\r\n            this.directiveInstance.stateChanged(false)\r\n\r\n            if (!this.isIE10) {\r\n                document.removeEventListener('mousedown', this.listenerMouseDown)\r\n            }\r\n\r\n            window.removeEventListener('resize', this.listenerResize)\r\n\r\n            if (!this.cdRef['destroyed']) {\r\n                this.cdRef.detectChanges()\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateColorPicker(emit: boolean = true, update: boolean = true): void {\r\n        if (this.cpColorMode == ColorModeInternal.grayscale) {\r\n            this.hsva.s = 0\r\n        }\r\n\r\n        const lastOutput = this.outputColor\r\n\r\n        const hsla = this.service.hsva2hsla(this.hsva)\r\n        const rgba = this.service.denormalizeRGBA(this.service.hsvaToRgba(this.hsva))\r\n\r\n        const hue = this.service.denormalizeRGBA(this.service.hsvaToRgba(new Hsva(this.sliderH || this.hsva.h, 1, 1, 1)))\r\n\r\n        if (update) {\r\n            this.hslaText = new Hsla(Math.round((hsla.h) * 360), Math.round(hsla.s * 100), Math.round(hsla.l * 100),\r\n                Math.round(hsla.a * 100) / 100)\r\n\r\n            this.rgbaText = new Rgba(rgba.r, rgba.g, rgba.b, Math.round(rgba.a * 100) / 100)\r\n\r\n            const allowHex8 = this.cpAlphaChannel == AlphaChannel.always\r\n\r\n            this.hexText = this.service.rgbaToHex(rgba, allowHex8)\r\n            this.hexAlpha = this.rgbaText.a\r\n        }\r\n\r\n        if (this.cpOutputFormat == OutputFormat.auto) {\r\n            if (this.hsva.a < 1) {\r\n                this.format = this.hsva.a < 1 ? ColorFormats.RGBA : ColorFormats.HEX\r\n            }\r\n        }\r\n\r\n        this.hueSliderColor = 'rgb(' + hue.r + ',' + hue.g + ',' + hue.b + ')'\r\n        this.alphaSliderColor = 'linear-gradient(to right, rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ', 0) 0%, rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ', 1) 100%)'\r\n\r\n        this.svSliderWhite = opaqueSliderWhite(rgba)\r\n        this.hueSliderWhite = opaqueSliderWhite(hue)\r\n        this.valueSliderWhite = opaqueSliderWhite(rgba)\r\n        this.alphaSliderWhite = transparentSliderWhite(rgba)\r\n\r\n        this.outputColor = this.service.outputFormat(this.hsva, this.cpOutputFormat, this.cpAlphaChannel)\r\n        this.selectedColor = this.service.outputFormat(this.hsva, 'rgba', null)\r\n\r\n        this.slider = new SliderPosition(\r\n            (this.sliderH || this.hsva.h),\r\n            this.hsva.s,\r\n            (1 - this.hsva.v),\r\n            this.hsva.a\r\n        )\r\n\r\n        if (emit && lastOutput !== this.outputColor) {\r\n            this.directiveInstance.colorChanged(this.outputColor)\r\n        }\r\n    }\r\n\r\n    // Private helper functions for the color picker dialog positioning\r\n\r\n    private setDialogPosition(): void {\r\n        if (this.cpDialogDisplay == DialogDisplay.inline) {\r\n            this.position = Position.relative\r\n        } else {\r\n            let position = Position.static, transform = '', style\r\n\r\n            let parentNode: any = null, transformNode: any = null\r\n\r\n            let node = this.directiveElementRef.nativeElement.parentNode\r\n\r\n            const dialogHeight = this.dialogElement.nativeElement.offsetHeight\r\n\r\n            while (node !== null && node.tagName !== 'HTML') {\r\n                style = window.getComputedStyle(node)\r\n                position = style.getPropertyValue('position')\r\n                transform = style.getPropertyValue('transform')\r\n\r\n                if (position != Position.static && parentNode === null) {\r\n                    parentNode = node\r\n                }\r\n\r\n                if (transform && transform !== 'none' && transformNode === null) {\r\n                    transformNode = node\r\n                }\r\n\r\n                if (position == Position.fixed) {\r\n                    parentNode = transformNode\r\n\r\n                    break\r\n                }\r\n\r\n                node = node.parentNode\r\n            }\r\n\r\n            const boxDirective = this.createDialogBox(this.directiveElementRef.nativeElement, (position != Position.fixed))\r\n\r\n            if (this.useRootViewContainer || (position == Position.fixed && (!parentNode || parentNode instanceof HTMLUnknownElement))) {\r\n                this.top = boxDirective.top\r\n                this.left = boxDirective.left\r\n            } else {\r\n                if (parentNode === null) {\r\n                    parentNode = node\r\n                }\r\n\r\n                const boxParent = this.createDialogBox(parentNode, (position != Position.fixed))\r\n\r\n                this.top = boxDirective.top - boxParent.top\r\n                this.left = boxDirective.left - boxParent.left\r\n            }\r\n\r\n            if (position == Position.fixed) {\r\n                this.position = Position.fixed\r\n            }\r\n\r\n            if (this.cpPosition == DialogPosition.left) {\r\n                this.top += boxDirective.height * this.cpPositionOffset / 100 - this.dialogArrowOffset\r\n                this.left -= this.cpWidth + this.dialogArrowSize - 2\r\n            } else if (this.cpPosition == DialogPosition.top) {\r\n                this.arrowTop = dialogHeight - 1\r\n                this.top -= dialogHeight + this.dialogArrowSize\r\n                this.left += this.cpPositionOffset / 100 * boxDirective.width - this.dialogArrowOffset\r\n            } else if (this.cpPosition == DialogPosition.bottom) {\r\n                this.top += boxDirective.height + this.dialogArrowSize\r\n                this.left += this.cpPositionOffset / 100 * boxDirective.width - this.dialogArrowOffset\r\n            } else {\r\n                this.top += boxDirective.height * this.cpPositionOffset / 100 - this.dialogArrowOffset\r\n                this.left += boxDirective.width + this.dialogArrowSize - 2\r\n            }\r\n        }\r\n    }\r\n\r\n    // Private helper functions for the color picker dialog positioning and opening\r\n\r\n    private isDescendant(parent: any, child: any): boolean {\r\n        let node: any = child.parentNode\r\n\r\n        while (node !== null) {\r\n            if (node === parent) {\r\n                return true\r\n            }\r\n\r\n            node = node.parentNode\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    private createDialogBox(element: any, offset: boolean): any {\r\n        return {\r\n            top: element.getBoundingClientRect().top + (offset ? window.pageYOffset : 0),\r\n            left: element.getBoundingClientRect().left + (offset ? window.pageXOffset : 0),\r\n            width: element.offsetWidth,\r\n            height: element.offsetHeight\r\n        }\r\n    }\r\n}\r\n","import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, EventEmitter, HostListener, Injector, Input, OnChanges, OnDestroy, Output, ViewContainerRef } from '@angular/core'\r\nimport { AlphaChannel, ColorMode, DialogDisplay, DialogPosition, OutputFormat } from '../util/types'\r\nimport { ColorPickerComponent } from './color-picker/color-picker.component'\r\n\r\n@Directive({\r\n    selector: '[cpColor]'\r\n})\r\nexport class ColorPickerDirective implements OnChanges, OnDestroy {\r\n\r\n    private dialog: ColorPickerComponent\r\n\r\n    private dialogCreated: boolean = false\r\n    private ignoreChanges: boolean = false\r\n\r\n    private cmpRef: ComponentRef<ColorPickerComponent>\r\n\r\n    private _cpColor: string\r\n\r\n    @Input() set cpColor(val: string) {\r\n        this._cpColor = val\r\n        if (this.dialog)\r\n            this.dialog.setColorFromString(val, false)\r\n    }\r\n\r\n    get cpColor() {\r\n        return this._cpColor\r\n    }\r\n\r\n    @Input() cpWidth: string = '230px'\r\n    @Input() cpHeight: string = 'auto'\r\n\r\n    @Input() cpToggle: boolean = false\r\n    @Input() cpDisabled: boolean = false\r\n\r\n    @Input() cpIgnoredElements: any = []\r\n\r\n    @Input() cpFallbackColor: string = ''\r\n\r\n    @Input() cpColorMode: ColorMode = 'color'\r\n\r\n    @Input() cpOutputFormat: OutputFormat = OutputFormat.auto\r\n    @Input() cpAlphaChannel: AlphaChannel = AlphaChannel.enabled\r\n\r\n    @Input() cpDisableInput: boolean = false\r\n\r\n    @Input() cpDialogDisplay: DialogDisplay = DialogDisplay.popup\r\n\r\n    @Input() cpSaveClickOutside: boolean = true\r\n    @Input() cpCloseClickOutside: boolean = true\r\n\r\n    @Input() cpUseRootViewContainer: boolean = false\r\n\r\n    @Input() cpPosition: DialogPosition = DialogPosition.right\r\n    @Input() cpPositionOffset: string = '0%'\r\n    @Input() cpPositionRelativeToArrow: boolean = false\r\n\r\n    @Input() cpOKButton: boolean = false\r\n    @Input() cpOKButtonText: string = 'OK'\r\n    @Input() cpOKButtonClass: string = 'cp-ok-button-class'\r\n\r\n    @Input() cpCancelButton: boolean = false\r\n    @Input() cpCancelButtonText: string = 'Cancel'\r\n    @Input() cpCancelButtonClass: string = 'cp-cancel-button-class'\r\n\r\n    @Input() cpPresetLabel: string = 'Preset colors'\r\n    @Input() cpPresetColors: string[]\r\n    @Input() cpMaxPresetColorsLength: number = 6\r\n\r\n    @Input() cpPresetEmptyMessage: string = 'No colors added'\r\n    @Input() cpPresetEmptyMessageClass: string = 'preset-empty-message'\r\n\r\n    @Input() cpAddColorButton: boolean = false\r\n    @Input() cpAddColorButtonText: string = 'Add color'\r\n\r\n    @Input() cpRemoveColorButtonClass: string = 'cp-remove-color-button-class'\r\n\r\n    @Output() cpInputChange = new EventEmitter<any>(true)\r\n\r\n    @Output() cpToggleChange = new EventEmitter<boolean>(true)\r\n\r\n    @Output() cpSliderChange = new EventEmitter<any>(true)\r\n    @Output() cpSliderDragEnd = new EventEmitter<string>(true)\r\n    @Output() cpSliderDragStart = new EventEmitter<string>(true)\r\n\r\n    @Output() cpOpen = new EventEmitter<string>(true)\r\n    @Output() cpClose = new EventEmitter<string>(true)\r\n\r\n    @Output() cpCancel = new EventEmitter<string>(true)\r\n    @Output() cpSelect = new EventEmitter<string>(true)\r\n    @Output() cpColorChange = new EventEmitter<string>(false)\r\n\r\n    @Output() cpPresetColorsChange = new EventEmitter<any>(true)\r\n\r\n    @HostListener('click') handleClick(): void {\r\n        this.inputFocus()\r\n    }\r\n\r\n    @HostListener('focus') handleFocus(): void {\r\n        this.inputFocus()\r\n    }\r\n\r\n    @HostListener('input', ['$event']) handleInput(event: any): void {\r\n        this.inputChange(event)\r\n    }\r\n\r\n    constructor(\r\n        private injector: Injector,\r\n        private cfr: ComponentFactoryResolver,\r\n        private appRef: ApplicationRef,\r\n        private vcRef: ViewContainerRef,\r\n        private elRef: ElementRef\r\n    ) { }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.cmpRef !== undefined) {\r\n            this.cmpRef.destroy()\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: any): void {\r\n        if (changes.cpToggle && !this.cpDisabled) {\r\n            if (changes.cpToggle.currentValue) {\r\n                this.openDialog()\r\n            } else if (!changes.cpToggle.currentValue) {\r\n                this.closeDialog()\r\n            }\r\n        }\r\n\r\n        if (changes.colorPicker) {\r\n            if (this.dialog && !this.ignoreChanges) {\r\n                if (this.cpDialogDisplay == DialogDisplay.inline) {\r\n                    this.dialog.setInitialColor(changes.colorPicker.currentValue)\r\n                }\r\n\r\n                this.dialog.setColorFromString(changes.colorPicker.currentValue, false)\r\n\r\n                if (this.cpUseRootViewContainer && this.cpDialogDisplay != DialogDisplay.inline) {\r\n                    this.cmpRef.changeDetectorRef.detectChanges()\r\n                }\r\n            }\r\n\r\n            this.ignoreChanges = false\r\n        }\r\n\r\n        if (changes.cpPresetLabel || changes.cpPresetColors) {\r\n            if (this.dialog) {\r\n                this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors)\r\n            }\r\n        }\r\n    }\r\n\r\n    public openDialog(): void {\r\n        if (!this.dialogCreated) {\r\n            let vcRef = this.vcRef\r\n\r\n            this.dialogCreated = true\r\n\r\n            if (this.cpUseRootViewContainer && this.cpDialogDisplay != DialogDisplay.inline) {\r\n                const classOfRootComponent = this.appRef.componentTypes[0]\r\n                const appInstance = this.injector.get(classOfRootComponent)\r\n\r\n                vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef\r\n\r\n                if (vcRef === this.vcRef) {\r\n                    console.warn('You are using cpUseRootViewContainer, ' +\r\n                        'but the root component is not exposing viewContainerRef!' +\r\n                        'Please expose it by adding \\'public vcRef: ViewContainerRef\\' to the constructor.')\r\n                }\r\n            }\r\n\r\n            const compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent)\r\n\r\n            this.cmpRef = vcRef.createComponent(compFactory, 0, this.injector, [])\r\n\r\n            this.cmpRef.instance.setupDialog(this, this.elRef, this.cpColor,\r\n                this.cpWidth, this.cpHeight, this.cpDialogDisplay, this.cpFallbackColor,\r\n                this.cpColorMode, this.cpAlphaChannel, this.cpOutputFormat, this.cpDisableInput,\r\n                this.cpIgnoredElements, this.cpSaveClickOutside, this.cpCloseClickOutside,\r\n                this.cpUseRootViewContainer, this.cpPosition, this.cpPositionOffset,\r\n                this.cpPositionRelativeToArrow, this.cpPresetLabel, this.cpPresetColors,\r\n                this.cpMaxPresetColorsLength, this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass,\r\n                this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText,\r\n                this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText,\r\n                this.cpAddColorButton, this.cpAddColorButtonText,\r\n                this.cpRemoveColorButtonClass)\r\n\r\n            this.dialog = this.cmpRef.instance\r\n\r\n            if (this.vcRef !== vcRef) {\r\n                this.cmpRef.changeDetectorRef.detectChanges()\r\n            }\r\n        } else if (this.dialog) {\r\n            this.dialog.openDialog(this.cpColor)\r\n        }\r\n    }\r\n\r\n    public closeDialog(): void {\r\n        if (this.dialog && this.cpDialogDisplay == DialogDisplay.popup) {\r\n            this.dialog.closeDialog()\r\n        }\r\n    }\r\n\r\n    public stateChanged(state: boolean): void {\r\n        this.cpToggleChange.emit(state)\r\n\r\n        if (state) {\r\n            this.cpOpen.emit(this.cpColor)\r\n        } else {\r\n            this.cpClose.emit(this.cpColor)\r\n        }\r\n    }\r\n\r\n    public colorChanged(value: string, ignore: boolean = true): void {\r\n        this.ignoreChanges = ignore\r\n\r\n        this.cpColorChange.emit(value)\r\n    }\r\n\r\n    public colorCanceled(): void {\r\n        this.cpCancel.emit()\r\n    }\r\n\r\n    public colorSelected(value: string): void {\r\n        this.cpSelect.emit(value)\r\n    }\r\n\r\n    public inputFocus(): void {\r\n        const element = this.elRef.nativeElement\r\n\r\n        const ignored = this.cpIgnoredElements.filter((item: any) => item === element)\r\n\r\n        if (!this.cpDisabled && !ignored.length) {\r\n            if (typeof document !== 'undefined' && element === document.activeElement) {\r\n                this.openDialog()\r\n            } else if (!this.dialog || !this.dialog.show) {\r\n                this.openDialog()\r\n            } else {\r\n                this.closeDialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    public inputChange(event: any): void {\r\n        if (this.dialog) {\r\n            this.dialog.setColorFromString(event.target.value, true)\r\n        } else {\r\n            this.cpColor = event.target.value\r\n\r\n            this.cpColorChange.emit(this.cpColor)\r\n        }\r\n    }\r\n\r\n    public inputChanged(event: any): void {\r\n        this.cpInputChange.emit(event)\r\n    }\r\n\r\n    public sliderChanged(event: any): void {\r\n        this.cpSliderChange.emit(event)\r\n    }\r\n\r\n    public sliderDragEnd(event: any): void {\r\n        this.cpSliderDragEnd.emit(event)\r\n    }\r\n\r\n    public sliderDragStart(event: any): void {\r\n        this.cpSliderDragStart.emit(event)\r\n    }\r\n\r\n    public presetColorsChanged(value: any[]): void {\r\n        this.cpPresetColorsChange.emit(value)\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core'\r\n\r\n@Directive({\r\n    selector: '[cpSlider]'\r\n})\r\nexport class SliderDirective {\r\n    private listenerMove: any\r\n    private listenerStop: any\r\n\r\n    @Input() rgX: number\r\n    @Input() rgY: number\r\n\r\n    @Input() slider: string\r\n\r\n    @Output() dragEnd = new EventEmitter()\r\n    @Output() dragStart = new EventEmitter()\r\n\r\n    @Output() newValue = new EventEmitter<any>()\r\n\r\n    @HostListener('mousedown', ['$event']) mouseDown(event: any): void {\r\n        this.start(event)\r\n    }\r\n\r\n    @HostListener('touchstart', ['$event']) touchStart(event: any): void {\r\n        this.start(event)\r\n    }\r\n\r\n    constructor(private elRef: ElementRef) {\r\n        this.listenerMove = (event: any) => this.move(event)\r\n\r\n        this.listenerStop = () => this.stop()\r\n    }\r\n\r\n    private move(event: any): void {\r\n        event.preventDefault()\r\n\r\n        this.setCursor(event)\r\n    }\r\n\r\n    private start(event: any): void {\r\n        this.setCursor(event)\r\n\r\n        event.stopPropagation()\r\n\r\n        document.addEventListener('mouseup', this.listenerStop)\r\n        document.addEventListener('touchend', this.listenerStop)\r\n        document.addEventListener('mousemove', this.listenerMove)\r\n        document.addEventListener('touchmove', this.listenerMove)\r\n\r\n        this.dragStart.emit()\r\n    }\r\n\r\n    private stop(): void {\r\n        document.removeEventListener('mouseup', this.listenerStop)\r\n        document.removeEventListener('touchend', this.listenerStop)\r\n        document.removeEventListener('mousemove', this.listenerMove)\r\n        document.removeEventListener('touchmove', this.listenerMove)\r\n\r\n        this.dragEnd.emit()\r\n    }\r\n\r\n    private getX(event: any): number {\r\n        const position = this.elRef.nativeElement.getBoundingClientRect()\r\n\r\n        const pageX = (event.pageX !== undefined) ? event.pageX : event.touches[0].pageX\r\n\r\n        return pageX - position.left - window.pageXOffset\r\n    }\r\n\r\n    private getY(event: any): number {\r\n        const position = this.elRef.nativeElement.getBoundingClientRect()\r\n\r\n        const pageY = (event.pageY !== undefined) ? event.pageY : event.touches[0].pageY\r\n\r\n        return pageY - position.top - window.pageYOffset\r\n    }\r\n\r\n    private setCursor(event: any): void {\r\n        const width = this.elRef.nativeElement.offsetWidth\r\n        const height = this.elRef.nativeElement.offsetHeight\r\n\r\n        const x = Math.max(0, Math.min(this.getX(event), width))\r\n        const y = Math.max(0, Math.min(this.getY(event), height))\r\n\r\n        if (this.rgX !== undefined && this.rgY !== undefined) {\r\n            this.newValue.emit({ s: x / width, v: (1 - y / height), rgX: this.rgX, rgY: this.rgY })\r\n        } else if (this.rgX === undefined && this.rgY !== undefined) {\r\n            this.newValue.emit({ v: y / height, rgY: this.rgY })\r\n        } else if (this.rgX !== undefined && this.rgY === undefined) {\r\n            this.newValue.emit({ v: x / width, rgX: this.rgX })\r\n        }\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core'\r\n\r\n@Directive({\r\n    selector: '[cpText]'\r\n})\r\nexport class TextDirective {\r\n    @Input() rg: number\r\n    @Input() text: any\r\n\r\n    @Output() newValue = new EventEmitter<any>()\r\n\r\n    @HostListener('input', ['$event']) inputChange(event: any): void {\r\n        const value = event.target.value\r\n\r\n        if (this.rg === undefined) {\r\n            this.newValue.emit(value)\r\n        } else {\r\n            const numeric = parseFloat(value)\r\n\r\n            this.newValue.emit({ v: numeric, rg: this.rg })\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common'\r\nimport { NgModule } from '@angular/core'\r\nimport { ColorPickerDirective } from './color-picker.directive'\r\nimport { ColorPickerComponent } from './color-picker/color-picker.component'\r\nimport { SliderDirective } from './slider.directive'\r\nimport { TextDirective } from './text.directive'\r\n\r\n@NgModule({\r\n    declarations: [\r\n        TextDirective,\r\n        SliderDirective,\r\n        ColorPickerComponent,\r\n        ColorPickerDirective\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        ColorPickerComponent,\r\n        ColorPickerDirective\r\n    ],\r\n    entryComponents: [\r\n        ColorPickerComponent\r\n    ]\r\n})\r\nexport class ColorPickerModule { }\r\n"]}